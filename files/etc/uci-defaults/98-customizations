#!/bin/sh

# shellcheck disable=SC2112,SC3001,SC3010,SC3037,SC3043

PASSWORD='@.password@'
SSH_AUTHORIZED_KEY='@.ssh_authorized_key@'

# shellcheck source=dependencies/functions.sh
. /lib/functions.sh

HOST="$(board_name | cut -d , -f 2)"
MEMORY="$(grep MemTotal: /proc/meminfo | sed 's/MemTotal://;s/kB//' | xargs)"
MEMORY=$(( MEMORY / 1024 )) # To MiB
TIMEZONE="CST-8"
TIMEZONE_NAME="Asia/Shanghai"
ZRAM_COMPRESS="zstd"
PRIVATE_DOMAIN="internal"
NETWORK_IP_PREFIX="192.168.8"
BANDWIDTH_UP="36mbps"
BANDWIDTH_DOWN="94mbps"
BTRFS_OPTIONS="compress=zstd"
TRANSMISSION_USER="transmission"
LOG_FILE="/tmp/uci-customizations.log"

UCI_BATCH_COMMANDS="
# Basic system
set system.@system[0].hostname=\"$HOST\"
set system.@system[0].timezone=\"$TIMEZONE\"
set system.@system[0].zonename=\"$TIMEZONE_NAME\"
set system.@system[0].zram_comp_algo=\"$ZRAM_COMPRESS\"
set system.@system[0].zram_size_mb=\"$MEMORY\"
set dhcp.@dnsmasq[0].local=\"/$PRIVATE_DOMAIN/\"
set dhcp.@dnsmasq[0].domain=\"$PRIVATE_DOMAIN\"
set dhcp.lan.domain=\"$PRIVATE_DOMAIN\"
set dropbear.@dropbear[0].RootPasswordAuth=\"on\"
set dropbear.@dropbear[0].Interface=\"lan\"
set network.lan.ipaddr=\"$NETWORK_IP_PREFIX.1\"
                    "
config_load wireless
# __on_each_wifi_interface $iface
function __on_each_wifi_interface() {
    local device band
    device=$(uci -q get "wireless.$1.device")
    band=$(uci -q get "wireless.$device.band")
    UCI_BATCH_COMMANDS="$UCI_BATCH_COMMANDS
set wireless.$device.disabled=\"0\"
set wireless.$1.ssid=\"$HOST-$band\"
set wireless.$1.encryption=\"sae-mixed\"
set wireless.$1.key=\"$PASSWORD\""
}

UCI_BATCH_COMMANDS="$UCI_BATCH_COMMANDS
# Wireless configuration"
config_foreach __on_each_wifi_interface "wifi-iface"

if uci -q show qosify > /dev/null
then
    UCI_BATCH_COMMANDS="$UCI_BATCH_COMMANDS
# Qosify
set qosify.wan.disabled=0
set qosify.wan.autorate_ingress=\"1\"
set qosify.wan.bandwidth_up=\"$BANDWIDTH_UP\"
set qosify.wan.bandwidth_down=\"$BANDWIDTH_DOWN\""
fi

if command -v block > /dev/null
then
    # __on_each_mount $mount
    function __on_each_mount() {
        UCI_BATCH_COMMANDS="$UCI_BATCH_COMMANDS
set fstab.$1.enabled=\"1\"
set fstab.$1.options=\"$BTRFS_OPTIONS\""
    }
    UCI_BATCH_COMMANDS="$UCI_BATCH_COMMANDS
# Fstab"
    block detect | uci import fstab
    config_load fstab
    config_foreach __on_each_mount mount
fi

if uci -q show ksmbd > /dev/null
then
    UCI_BATCH_COMMANDS="$UCI_BATCH_COMMANDS
# Ksmbd"
    for block in /dev/nvme*p* /dev/sd*p* /dev/mmcblk*p*
    do
        if [[ -b "$block" ]]
        then
            name="$(basename "$block")"
            UCI_BATCH_COMMANDS="$UCI_BATCH_COMMANDS
set ksmbd.$name=\"share\"
set ksmbd.$name.name=\"$name\"
set ksmbd.$name.path=\"/mnt/$name\"
set ksmbd.$name.read_only=\"yes\"
set ksmbd.$name.writable=\"root\"
set ksmbd.$name.guest_ok=\"yes\""
            if [[ -z "$STORAGE" ]]
            then
                STORAGE="/mnt/$name"
            fi
        fi
    done
fi

if uci -q show transmission > /dev/null && [[ -n "$STORAGE" ]]
then
    UCI_BATCH_COMMANDS="$UCI_BATCH_COMMANDS
# Transmission
set transmission.@transmission[0].enabled=\"1\"
set transmission.@transmission[0].encryption=\"1\"
set transmission.@transmission[0].download_dir=\"$STORAGE/transmission/downloads\"
set transmission.@transmission[0].incomplete_dir=\"$STORAGE/transmission/downloading\"
set transmission.@transmission[0].incomplete_dir_enabled=\"true\"
set transmission.@transmission[0].lpd_enabled=\"true\"
set transmission.@transmission[0].rpc_authentication_required=\"true\"
set transmission.@transmission[0].rpc_bind_address=\"$NETWORK_IP_PREFIX.1\"
set transmission.@transmission[0].rpc_whitelist=\"127.0.0.1,$NETWORK_IP_PREFIX.*\"
set transmission.@transmission[0].rpc_whitelist_enabled=\"true\"
set transmission.@transmission[0].rpc_username=\"$TRANSMISSION_USER\"
set transmission.@transmission[0].rpc_password=\"$PASSWORD\""
fi

if command -v AdGuardHome > /dev/null && [[ -f /etc/adguardhome.yaml ]]
then
    # Taken from https://openwrt.org/docs/guide-user/services/dns/adguard-home#setup
    UCI_BATCH_COMMANDS="$UCI_BATCH_COMMANDS
# AdGuardHome as DNS server only
set dhcp.@dnsmasq[0].port=\"54\"
set dhcp.@dnsmasq[0].expandhosts=\"1\"
set dhcp.@dnsmasq[0].cachesize=\"0\"
set dhcp.@dnsmasq[0].noresolv=\"1\""
fi

{
    echo "Invoking uci commands:"
    echo "$UCI_BATCH_COMMANDS" | tee >(uci batch)
    echo "Running extra commands to commit uci changes and other things..."
    uci commit
    echo -e "$PASSWORD\n$PASSWORD" | passwd root
    mkdir -p /etc/dropbear
    grep -q "$SSH_AUTHORIZED_KEY" /etc/dropbear/authorized_keys || echo "$SSH_AUTHORIZED_KEY" >> /etc/dropbear/authorized_keys
    if command -v ksmbd.adduser > /dev/null
    then
        ksmbd.adduser -a -p "$PASSWORD" "root" || ksmbd.adduser -u -p "$PASSWORD" "root"
    fi
} | tee "$LOG_FILE"
